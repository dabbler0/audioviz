// Generated by CoffeeScript 1.7.1
(function() {
  var Reader, Writer, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  exports.Reader = Reader = (function(_super) {
    __extends(Reader, _super);

    function Reader() {
      stream.Transform.call(this, {
        objectMode: true
      });
    }

    Reader.prototype._transform = function(chunk, encoding, done) {
      var byte, offset, _i, _len;
      for (offset = _i = 0, _len = chunk.length; _i < _len; offset = _i += 2) {
        byte = chunk[offset];
        this.push(chunk.readInt16LE(offset) + Math.random() / 1000);
      }
      return done();
    };

    return Reader;

  })(stream.Transform);

  exports.Writer = Writer = (function(_super) {
    __extends(Writer, _super);

    function Writer() {
      var headerBuffer;
      this.intBuffer = new Buffer(5000);
      this.position = 0;
      stream.Transform.call(this, {
        objectMode: true
      });
      headerBuffer = headerBuffer = new Buffer(44);
      headerBuffer.write('RIFF', 0);
      headerBuffer.writeUInt32LE(4294967295, 4);
      headerBuffer.write('WAVEfmt ', 8);
      headerBuffer.writeUInt32LE(16, 16);
      headerBuffer.writeUInt16LE(1, 20);
      headerBuffer.writeUInt16LE(1, 22);
      headerBuffer.writeUInt32LE(8000, 24);
      headerBuffer.writeUInt32LE(8000 * 2, 28);
      headerBuffer.writeUInt16LE(2, 32);
      headerBuffer.writeUInt16LE(16, 34);
      headerBuffer.write('data', 36);
      headerBuffer.writeUInt32LE(4294967295, 40);
      this.push(headerBuffer);
    }

    Writer.prototype._transform = function(num, encoding, done) {
      if (num > 32767) {
        num = 32767;
      }
      if (num < -32767) {
        num = -32767;
      }
      this.intBuffer.writeInt16LE(Math.round(num), this.position);
      this.position += 2;
      if (this.position === 5000) {
        console.log('writing buffer');
        this.push(this.intBuffer);
        this.intBuffer = new Buffer(5000);
        this.position = 0;
      }
      return done();
    };

    return Writer;

  })(stream.Transform);

}).call(this);
